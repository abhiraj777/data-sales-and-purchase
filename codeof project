 from tkinter import *
import tkinter.messagebox
import mysql.connector

class product :

    def __init__(self,root):

        p = database()
        p.conn()

        self.root= root
        self.root.title(" WAREHOUSE INVENTORY SALES PURCHASE ")
        self.root.geometry("1325x690")
        self.root.config(bg = "yellow")

        pid = StringVar()
        pname = StringVar()
        pprice = StringVar()
        pqty = StringVar()
        pcompany = StringVar()
        pcontact = StringVar()

        # lets call database methods --------

        def close():
            print(" close database method called \n")
            close = tkinter.messagebox.askyesno("WAREHOUSE INVENTORY SALES PURCHASE", "DO YOU REALLY WANNA GO - ? ")

            if close > 0:
                root.destroy()
                print(" product close method finished \n")
                return


        def clear():
            print("clear database method called !\n")
            self.textpid.delete(0,END)
            self.textpname.delete(0, END)
            self.textprice.delete(0, END)
            self.textpqty.delete(0, END)
            self.textpcompany.delete(0, END)
            self.textpcontact.delete(0, END)
            print(" clear database method finished\n")

        def insert():
            print("insertion in table called ! \n")

            if(len(pid.get())!=0):
                p.insert(pid.get(),pname.get(),pprice.get(),pqty.get(),pcompany.get(),pcontact.get())
                productlist.delete(0,END)
                productlist.insert(END,pid.get(),pname.get(),pprice.get(),pqty.get(),pcompany.get(),pcontact.get())
                showinproductlist()
            else:
                tkinter.messagebox.askyesno("WAREHOUSE INVENTORY SALES PURCHASE","ATLEAST ---- ENTER PID !!")


            print("insertion in table finished ! \n")

        def showinproductlist():
            print("show inproductlist method called !\n")
            productlist.delete(0,END)

            for row in p.show():
                productlist.insert(END,row,str(""))

            print("show inproductlist method finished !\n")

        #add to the scrollbar
        def productrec(event):  # function to be called from scrollbar productlist
            print("productlist method called ! \n")
            global pd
            # this is global because when we select item from scrollbar , it need to be available ffor all operations that value which we select

            searchpd = productlist.curselection()[0]
            #for getting single element

            pd = productlist.get(searchpd)
            self.textpid.delete(0, END)
            self.textpid.insert(END,pd[0])
            self.textpname.delete(0, END)
            self.textpname.insert(END, pd[1])
            self.textprice.delete(0, END)
            self.textprice.insert(END, pd[2])
            self.textpqty.delete(0, END)
            self.textpqty.insert(END, pd[3])
            self.textpcompany.delete(0, END)
            self.textpcompany.insert(END, pd[4])
            self.textpcontact.delete(0, END)
            self.textpcontact.insert(END, pd[5])

            print("productrec method finished  \n")

        def delete():
            print("deleting from database !\n")

            if(len(pid.get()) != 0):
                p.delete(pd[0])
                clear()
                showinproductlist()
                print("deleting method finished !\n")



        def search():
            print("product search method called!\n")

            productlist.delete(0,END)

            for row in p.search(pid.get(),pname.get(),pprice.get(),pqty.get(),pcompany.get(),pcontact.get()):
                productlist.insert(END,row,str(""))

            print("product search method finished ! \n")

        def update():
            print("product update method called! \n")

            if(len(pid.get()) != 0):
                print("pd[0] : ",pd[0])
                p.delete(pd[0])

            if(len(pid.get()) != 0):
                p.insert(pid.get(),pname.get().pprice.get(),pqty.get(),pcompany.get(),pcontact.get())
                productlist.delete(0,END)
                productlist.insert(END,(pid.get(),pname.get().pprice.get(),pqty.get(),pcompany.get(),pcontact.get()))
                print("product update method finished ! \n")


        mainframe = Frame(self.root,bg="red")
        mainframe.grid()

        headframe = Frame(mainframe,bd = 1,padx = 50,pady= 10,bg = "white",relief = RIDGE)
        headframe.pack(side = TOP)

        self.ITITLE = Label(headframe,font = ('arial',40,'bold'),fg='red',text = "  WAREHOUSE INVENT SALES/PURCHASE SYS  ",bg = 'white')
        self.ITITLE.grid()

        operationframe = Frame(mainframe,bd=1,width=1300,height=60,padx=50,pady=20)
        operationframe.pack(side = BOTTOM)

        bodyframe = Frame(mainframe , bd=2,width=1290,height=400,padx=50,pady=20,bg='white',relief=RIDGE)
        bodyframe.pack(side=BOTTOM)

        leftbodyframe = LabelFrame (bodyframe,bd=2,width=600,height=380,padx=20,bg = 'yellow',relief = RIDGE,font=('arial',15,'bold'),text="product item details : ")
        leftbodyframe.pack(side=LEFT)

        rightbodyframe = LabelFrame(bodyframe, bd=2, width=300, height=380, padx=20, bg='yellow', relief=RIDGE,
                                   font=('arial', 15, 'bold'), text="product item details : ")
        rightbodyframe.pack(side=RIGHT)

        self.labelpid = Label(leftbodyframe,bd=1,font=('arial',15,'bold'),text = "product id : ",padx = 2,pady=2,bg='white',fg='blue')
        self.labelpid.grid(row=0,column=0,sticky = W)
        self.textpid = Entry(leftbodyframe,font=('arial',15,'bold'),textvariable = pid,width = 33)
        self.textpid.grid(row=0,column=1,sticky=W)

        self.labelpname = Label(leftbodyframe, bd=1, font=('arial', 15, 'bold'), text="product name : ", padx=2, pady=2,
                              bg='white', fg='blue')
        self.labelpname.grid(row=1, column=0, sticky=W)
        self.textpname = Entry(leftbodyframe, font=('arial', 15, 'bold'), textvariable=pname, width=33)
        self.textpname.grid(row=1, column=1, sticky=W)

        self.labelprice = Label(leftbodyframe, bd=1, font=('arial', 15, 'bold'), text="product price : ", padx=2, pady=2,
                              bg='white', fg='blue')
        self.labelprice.grid(row=2, column=0, sticky=W)
        self.textprice = Entry(leftbodyframe, font=('arial', 15, 'bold'), textvariable=pprice, width=33)
        self.textprice.grid(row=2, column=1, sticky=W)

        self.labelpqty = Label(leftbodyframe, bd=1, font=('arial', 15, 'bold'), text="product qty : ", padx=2, pady=2,
                              bg='white', fg='blue')
        self.labelpqty.grid(row=3, column=0, sticky=W)
        self.textpqty = Entry(leftbodyframe, font=('arial', 15, 'bold'), textvariable=pqty, width=33)
        self.textpqty.grid(row=3, column=1, sticky=W)

        self.labelpcompany = Label(leftbodyframe, bd=1, font=('arial', 15, 'bold'), text="product company : ", padx=2, pady=2,
                              bg='white', fg='blue')
        self.labelpcompany.grid(row=4, column=0, sticky=W)
        self.textpcompany = Entry(leftbodyframe, font=('arial', 15, 'bold'), textvariable=pcompany, width=33)
        self.textpcompany.grid(row=4, column=1, sticky=W)

        self.labelpcontact = Label(leftbodyframe, bd=1, font=('arial', 15, 'bold'), text="product contact : ", padx=2, pady=2,
                              bg='white', fg='blue')
        self.labelpcontact.grid(row=5, column=0, sticky=W)
        self.textpcontact = Entry(leftbodyframe, font=('arial', 15, 'bold'), textvariable=pcontact, width=33)
        self.textpcontact.grid(row=5, column=1, sticky=W)


        self.labelpc=Label(leftbodyframe,padx= 2)
        self.labelpc.grid(row=6,column=0,sticky=W)
        self.labelpc = Label(leftbodyframe, padx=2)
        self.labelpc.grid(row=7, column=0, sticky=W)
        self.labelpc = Label(leftbodyframe, padx=2)
        self.labelpc.grid(row=8, column=0, sticky=W)
        self.labelpc = Label(leftbodyframe, padx=2)
        self.labelpc.grid(row=9, column=0, sticky=W)
        self.labelpc = Label(leftbodyframe, padx=2)
        self.labelpc.grid(row=10, column=0, sticky=W)
        self.labelpc=Label(leftbodyframe,padx= 2)
        self.labelpc.grid(row=11,column=0,sticky=W)
        self.labelpc = Label(leftbodyframe, padx=2)
        self.labelpc.grid(row=12, column=0, sticky=W)
        self.labelpc=Label(leftbodyframe,padx= 2)
        self.labelpc.grid(row=13,column=0,sticky=W)

        scroll = Scrollbar(rightbodyframe)
        scroll.grid(row=0,column=1,sticky='ns')

        productlist = Listbox(rightbodyframe,width=40,height=14,font=('arial',15,'bold'),yscrollcommand = scroll.set)

        #called above created prodrec method of init
        productlist.bind('<<ListboxSelect>>',productrec)

        productlist.grid(row=0,column=0,padx=8)
        scroll.config(command = productlist.yview)



        self.buttonsave = Button(operationframe,text='save',font = ('arial',12,'bold'),height=1,width='12',bd=4,command=insert)
        self.buttonsave.grid(row=0,column=0)
        self.buttonclear = Button(operationframe, text='clear', font=('arial', 12, 'bold'), height=1, width='12', bd=4,command=clear)
        self.buttonclear.grid(row=0, column=1)
        self.buttondelete = Button(operationframe, text='delete', font=('arial', 12, 'bold'), height=1, width='12', bd=4,command=delete)
        self.buttondelete.grid(row=0, column=2)
        self.buttonupdate = Button(operationframe, text='update', font=('arial', 12, 'bold'), height=1, width='12', bd=4,command= update)
        self.buttonupdate.grid(row=0, column=3)
        self.buttonsearch = Button(operationframe, text='search', font=('arial', 12, 'bold'), height=1, width='12', bd=4,command=search)
        self.buttonsearch.grid(row=0, column=4)
        self.buttonshow = Button(operationframe, text='show', font=('arial', 12, 'bold'), height=1, width='12', bd=4,command=showinproductlist)
        self.buttonshow.grid(row=0, column=5)
        self.buttonclose = Button(operationframe, text='close', font=('arial', 12, 'bold'), height=1, width='12', bd=4,command=close)
        self.buttonclose.grid(row=0, column=6)

class database:

    def conn(self):
        print("Database connection method called !")

        con = mysql.connector.connect(host="localhost", user="root", passwd="1234", database="inventory")

        cur = con.cursor()

        cur.execute("CREATE TABLE IF NOT EXISTS product (pid INT(10) PRIMARY KEY, pname VARCHAR(20),price VARCHAR(20),qty VARCHAR(20),company VARCHAR(20),contact VARCHAR(20)) ")

        con.commit()
        con.close()
        print(" database method finished\n")


    def insert(self,pid,pname,price,qty,company,contact):
        print("database insert method called !")
        con = mysql.connector.connect(host="localhost", user="root", passwd="1234", database="inventory")

        cur = con.cursor()
        query = "insert into product (pid,pname,price,qty,company,contact)values(%s,%s,%s,%s,%s,%s)"
        cur.execute(query,(pid,pname,price,qty,company,contact))
        con.commit()
        con.close()
        print(" database insert method finished \n")


    def show(self):
        print("database show method called !")
        con = mysql.connector.connect(host="localhost", user="root", passwd="1234", database="inventory")

        cur = con.cursor()
        query = "select * from product"
        cur.execute(query)
        rows = cur.fetchall()
        con.close()
        print(" database show method finished \n")
        return rows

    def delete(self,pid):
        print("database delete method called ! -> ",pid)
        con = mysql.connector.connect(host="localhost", user="root", passwd="1234", database="inventory")

        cur = con.cursor()
        query = "DELETE FROM product WHERE pid = %s"
        cur.execute(query,(pid,))
        con.commit()
        con.close()
        print(pid," database delete method finished \n")

    def search(self,pid="",pname="",price="",qty="",company="",contact=""):
        print("database search method called ! -> ", pid)
        con = mysql.connector.connect(host="localhost", user="root", passwd="1234", database="inventory")

        cur = con.cursor()
        query = "SELECT *  from product where pid = %s or pname = %s or price = %s or qty = %s or company = %s or contact = %s"
        cur.execute(query,(pid,pname,price,qty,company,contact))
        row = cur.fetchall()
        con.close()
        print(pid, " database delete method finished \n")
        return row

    def update(self,pid="",pname="",price="",qty="",company="",contact=""):
        print("database update method called ! -> ", pid)
        con = mysql.connector.connect(host="localhost", user="root", passwd="1234", database="inventory")

        cur = con.cursor()
        query = "UPDATE product SET pid = %s or pname =%s or price = %s or qty = %s or company = %s or contact = %s"
        cur.execute(query,(pid,pname,price,qty,company,contact))
        con.commit()
        con.close()
        print(pid, " database update method finished \n")




if __name__ == '__main__' :
    root = Tk()
    application = product(root)
    root.mainloop()
